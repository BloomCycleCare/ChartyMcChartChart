name: Release

# Controls when the action will run. 
on:
  push:
    tags:
      - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # TODO: enable --> needs: [ unit_tests, android_tests ]
    runs-on: ubuntu-latest
    steps:
      # 1
      - name: Checkout code
        uses: actions/checkout@v2
      # 2
      - name: Generate Release APK
        run: ./gradlew app_charting:assembleRelease
      # 3
      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        # ID used to access action output
        id: sign_app
        with:
          releaseDirectory: app_charting/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.KEYSTORE }}
          alias: ${{ secrets.RELEASE_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.RELEASE_KEY_PASSWORD }}
      # 4
      - uses: actions/upload-artifact@master
        with:
          name: release.apk
          path: ${{steps.sign_app.outputs.signedReleaseFile}}
      # 5
      - uses: actions/upload-artifact@master
        with:
          name: mapping.txt
          path: app_charting/build/outputs/mapping/release/mapping.txt

  deploy-play-store:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      # 1
      - uses: actions/download-artifact@master
        with:
          name: release.apk
#      - uses: actions/download-artifact@master
#        with:
#          name: mapping.txt
      # 2
      - name: Publish to Play Store internal test track
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          # 3
          packageName: com.bloomcyclecare.cmcc
          releaseFile: release.apk
          track: internal
          userFraction: 1.0
#          mappingFile: mapping.txt -- not needed until I use proguard
